<resources>
    <string name="app_name">PAL</string>
    <string-array name="java_topics">
        <item>Introduction to Java</item>
        <item>Java Variables</item>
        <item>Java Data Types</item>
        <item>Java Operators</item>
        <item>Java String</item>
    </string-array>
    <string name="definition">

        Android Studio is the official Integrated Development Environment (IDE) for Android app development, based on IntelliJ IDEA . On top of IntelliJs powerful code editor and developer tools, Android Studio offers even more features that enhance your productivity when building Android apps, such as:\n\n

A flexible Gradle-based build system\n
A fast and feature-rich emulator\n
A unified environment where you can develop for all Android devices\n
Apply Changes to push code and resource changes to your running app without restarting your app\n
Code templates and GitHub integration to help you build common app features and import sample code\n
Extensive testing tools and frameworks\n
Lint tools to catch performance, usability, version compatibility, and other problems\n
C++ and NDK support\n
Built-in support for Google Cloud Platform, making it easy to integrate Google Cloud Messaging and App Engine\n\n\n\n

        Source:\n
        Site: https://developer.android.com/studio/intro
    </string>
    <string name="a_basic">

        Each project in Android Studio contains one or more modules with source code files and resource files. Types of modules include:\n\n
•	Android app modules\n
•	Library modules\n
•	Google App Engine modules\n\n
By default, Android Studio displays your project files in the Android project view, as shown in figure 1. This view is organized by modules to provide quick access to your project\'s key source files.\n\n
All the build files are visible at the top level under Gradle Scripts and each app module contains the following folders:\n\n
•	manifests: Contains the AndroidManifest.xml file.\n
•	java: Contains the Java source code files, including JUnit test code.\n
•	res: Contains all non-code resources, such as XML layouts, UI strings, and bitmap images.\n\n
The Android project structure on disk differs from this flattened representation. To see the actual file structure of the project, select Project from the Project dropdown (in figure 1, it's showing as Android).\n\n
You can also customize the view of the project files to focus on specific aspects of your app development. For example, selecting the Problems view of your project displays links to the source files containing any recognized coding and syntax errors, such as a missing XML element closing tag in a layout file.\n\n\n

        Source:\n
        Site: https://developer.android.com/studio/intro

    </string>
    <string name="a_ui">
        You can also customize the view of the project files to focus on specific aspects of your app development. For example, selecting the Problems view of your project displays links to the source files containing any recognized coding and syntax errors, such as a missing XML element closing tag in a layout file.\n\n

1.	The toolbar lets you carry out a wide range of actions, including running your app and launching Android tools.\n
2.	The navigation bar helps you navigate through your project and open files for editing. It provides a more compact view of the structure visible in the Project window.\n
3.	The editor window is where you create and modify code. Depending on the current file type, the editor can change. For example, when viewing a layout file, the editor displays the Layout Editor.\n
4.	The tool window bar runs around the outside of the IDE window and contains the buttons that allow you to expand or collapse individual tool windows.\n
5.	The tool windows give you access to specific tasks like project management, search, version control, and more. You can expand them and collapse them.\n
6.	The status bar displays the status of your project and the IDE itself, as well as any warnings or messages.\n
You can organize the main window to give yourself more screen space by hiding or moving toolbars and tool windows. You can also use keyboard shortcuts to access most IDE features.\n\n
At any time, you can search across your source code, databases, actions, elements of the user interface, and so on, by double-pressing the Shift key, or clicking the magnifying glass in the upper right-hand corner of the Android Studio window. This can be very useful if, for example, you are trying to locate a particular IDE action that you have forgotten how to trigger.\n\n
        Tool window\n\n
Instead of using preset perspectives, Android Studio follows your context and automatically brings up relevant tool windows as you work. By default, the most commonly used tool windows are pinned to the tool window bar at the edges of the application window.\n\n
•	To expand or collapse a tool window, click the tool’s name in the tool window bar. You can also drag, pin, unpin, attach, and detach tool windows.\n
•	To return to the current default tool window layout, click Window > Restore Default Layout or customize your default layout by clicking Window > Store Current Layout as Default.\n
•	To show or hide the entire tool window bar, click the window icon   in the bottom left-hand corner of the Android Studio window.\n
•	To locate a specific tool window, hover over the window icon and select the tool window from the menu.\n\n
        Tool Shortcuts

Project \n
- Alt+1(Windows)\n
- Command+1 (MAC)\n\n

Version Control\n
- Alt+9(Windows)\n
- Command+9 (MAC)\n\n

Run\n
- Shift+F10(Windows)\n
- Control+R (MAC)\n\n

Debug \n
- Shift+F9(Windows)\n
- Control+D (MAC)\n\n

Logcat \n
- Alt+6(Windows)\n
- Command+6 (MAC)\n\n

Return to Editor\n
- ESC(Windows)\n
- ESC (MAC)\n\n

Hide Tool All Windows\n
- Ctrl+Shift+F12(Windows)\n
- Command+Shift+12 (MAC)\n\n

You can also use keyboard shortcuts to open tool windows. Table 1 lists the shortcuts for the most common windows.\n\n
        You can also use keyboard shortcuts to open tool windows. Table 1 lists the shortcuts for the most common windows.
If you want to hide all toolbars, tool windows, and editor tabs, click View > Enter Distraction Free Mode. This enables Distraction Free Mode. To exit Distraction Free Mode, click View > Exit Distraction Free Mode.\n
You can use Speed Search to search and filter within most tool windows in Android Studio. To use Speed Search, select the tool window and then type your search query.\n\n
        Code completion\n
Android Studio has three types of code completion, which you can access using keyboard shortcuts.\n\n

Basic Completion - Displays basic suggestions for variables, types, methods, expressions, and so on. If you call basic completion twice in a row, you see more results, including private members and non-imported static members.\n
Smart Completion - Displays relevant options based on the context. Smart completion is aware of the expected type and data flows. If you call Smart Completion twice in a row, you see more results, including chains.\n
Statement Completion - Completes the current statement for you, adding missing parentheses, brackets, braces, formatting, etc.\n\n
        You can also perform quick fixes and show intention actions by pressing Alt+Enter.\n\n
        Navigation\n\n
Here are some tips to help you move around Android Studio.\n\n
•	Switch between your recently accessed files using the Recent Files action. Press Control+E (Command+E on a Mac) to bring up the Recent Files action. By default, the last accessed file is selected. You can also access any tool window through the left column in this action.\n
•	View the structure of the current file using the File Structure action. Bring up the File Structure action by pressing Control+F12 (Command+F12 on a Mac). Using this action, you can quickly navigate to any part of your current file.\n
•	Search for and navigate to a specific class in your project using the Navigate to Class action. Bring up the action by pressing Control+N (Command+O on a Mac). Navigate to Class supports sophisticated expressions, including camel humps, paths, line navigate to, middle name matching, and many more. If you call it twice in a row, it shows you the results out of the project classes.\n
•	Navigate to a file or folder using the Navigate to File action. Bring up the Navigate to File action by pressing Control+Shift+N (Command+Shift+O on a Mac). To search for folders rather than files, add a / at the end of your expression.\n
•	Navigate to a method or field by name using the Navigate to Symbol action. Bring up the Navigate to Symbol action by pressing Control+Shift+Alt+N (Command+Option+O on a Mac).\n
•	Find all the pieces of code referencing the class, method, field, parameter, or statement at the current cursor position by pressing Alt+F7 (Option+F7 on a Mac).\n\n

        Version control basics\n\n
Android Studio supports a variety of version control systems (VCS’s), including Git, GitHub, CVS, Mercurial, Subversion, and Google Cloud Source Repositories.\n
After importing your app into Android Studio, use the Android Studio VCS menu options to enable VCS support for the desired version control system, create a repository, import the new files into version control, and perform other version control operations:\n
1.	From the Android Studio VCS menu, click Enable Version Control Integration.\n
2.	From the drop-down menu, select a version control system to associate with the project root, and then click OK.\n
The VCS menu now displays a number of version control options based on the system you selected.\n
        Gradle build system\n\n
Android Studio uses Gradle as the foundation of the build system, with more Android-specific capabilities provided by the Android plugin for Gradle. This build system runs as an integrated tool from the Android Studio menu, and independently from the command line. You can use the features of the build system to do the following:\n
•	Customize, configure, and extend the build process.\n
•	Create multiple APKs for your app, with different features using the same project and modules.\n
•	Reuse code and resources across sourcesets.\n
By employing the flexibility of Gradle, you can achieve all of this without modifying your app's core source files. Android Studio build files are named build.gradle. They are plain text files that use Groovy syntax to configure the build with elements provided by the Android plugin for Gradle. Each project has one top-level build file for the entire project and separate module-level build files for each module. When you import an existing project, Android Studio automatically generates the necessary build files.\n
        Build variants\n\n
The build system can help you create different versions of the same application from a single project. This is useful when you have both a free version and a paid version of your app, or if you want to distribute multiple APKs for different device configurations on Google Play.\n

Source:\n
        Site: https://developer.android.com/studio/intro
    </string>
    <string name="create">Android Studio includes tools for every stage of development, but what\'s most important is simply writing your app: writing the code, building layouts, creating images, and being productive along the way.\n\n

That\'s what this section is all about: the tools that help you write your app and write it quickly.\n\n
        Code completion\n\n
Code completion speeds up app development by reducing typing errors and the need to look up class, method, and variable names. The code editor provides basic completion, smart completion, and statement completion.\n\n
Learn more about Code completion.\n\n
Create custom code-completion templates\n\n
Live templates allow you to enter code snippets for fast insertion and completion of small chunks of code. To insert a live template, type the template abbreviation and press the Tab key. Android Studio inserts the code snippet associated with the template into your code.\n
For example, the newInstance abbreviation followed by Tab inserts the code for a new fragment instance with argument placeholders. Or type fbc to insert the findViewById() method along with cast and resource id syntax.\n\n
To see the list of supported live templates and customize them, click File > Settings > Editor > Live Templates.\n\n
Learn more about Live templates.\n\n
Get quick fixes from lint\n\n
Android Studio provides a code scanning tool called Lint to help you to identify and correct problems with the structural quality of your code, without executing the app or writing tests.\n
Every time you build your app, Android Studio runs Lint to check your source files for potential bugs and looks for optimization improvements in correctness, security, performance, usability, accessibility, and internationalization.\n\n
Learn more about Lint.\n\n
See documentation and resource details\n\n
You can view documentation for an API by placing the caret on the method/member/class name and pressing F1.\n
Information is also available for other resources, such as images and themes. For example, if you place the caret on the theme name in your Android manifest file and press F1, you can see the theme inheritance hierarchy and colors or images for the various attributes.\n\n
Quickly create new files\n\n
When you want to create a new file, click the desired directory in the Project window, then press Alt + Insert (Command + N on Mac). Android Studio shows a small window with a list of suggested file types, as appropriate for the selected directory.\n\n
Working with resources\n\n
Android Studio includes the following features and tools to help you create and manage resource files.\n\n
Learn more about adding resources.\n\n
Create images for all screen densities\n
Android Studio includes a tool called Vector Asset Studio that helps you create images that support each screen density. You can upload your own SVG file for editing or select from one of the many Google-provided material design icons. To get started, click File > New > Vector Asset.\n
Learn more about Vector Asset Studio.\n\n
Preview images and colors\n\n
When referencing images and icons in your code, a preview of the image appears in the left margin to help you verify the image or icon reference.\n
To view the full size image, click the thumbnail in the left margin. Or, place the caret on the inline reference to the asset and press F1 to see the image details, including all the alternative sizes.\n\n
Create new layouts\n\n
Android Studio offers an advanced layout editor that allows you to drag-and-drop widgets into your layout and preview your layout while editing the XML.\n
To get started, click the module where you want to add the layout, then click File > New > XML > Layout XML File.\n
Learn more about the Layout Editor.\n\n
Translate UI strings\n\n
The Translations Editor tool gives you a single view of all of your translated resources, making it easy to change or add translations, and even find missing translations without opening every version of the strings.xml file. You can even upload your strings file to order translation services.\n
To get started, right-click on any copy of your strings.xml file then click Open Translations Editor.\n\n
        Source:\n
        Site: https://developer.android.com/studio/write
    </string>
    <string name="a_avd">
        An Android Virtual Device (AVD) is a configuration that defines the characteristics of an Android phone, tablet, Wear OS, Android TV, or Automotive OS device that you want to simulate in the Android Emulator. The Device Manager is an interface you can launch from Android Studio that helps you create and manage AVDs.\n
To open the new Device Manager, do one of the following:\n
•	From the Android Studio Welcome screen, select More Actions > Virtual Device Manager.\n
•	After opening a project, select View > Tool Windows > Device Manager from the main menu bar.\n\n

About AVDs\n
An AVD contains a hardware profile, system image, storage area, skin, and other properties.\n
We recommend that you create an AVD for each system image that your app could potentially support based on the setting in your manifest.\n\n
Hardware profile\n
The hardware profile defines the characteristics of a device as shipped from the factory. The Device Manager comes preloaded with certain hardware profiles, such as Pixel devices, and you can define or customize the hardware profiles as needed.\n
Notice that only some hardware profiles are indicated to include Play Store. This indicates that these profiles are fully CTS compliant and may use system images that include the Play Store app.\n\n
System images\n
A system image labeled with Google APIs includes access to Google Play services. A system image labeled with the Google Play logo in the Play Store column includes the Google Play Store app and access to Google Play services, including a Google Play tab in the Extended controls dialog that provides a convenient button for updating Google Play services on the device.\n
To ensure app security and a consistent experience with physical devices, system images with the Google Play Store included are signed with a release key, which means that you cannot get elevated privileges (root) with these images. If you require elevated privileges (root) to aid with your app troubleshooting, you can use the Android Open Source Project (AOSP) system images that do not include Google apps or services.\n\n
Storage area
The AVD has a dedicated storage area on your development machine. It stores the device user data, such as installed apps and settings, as well as an emulated SD card. If needed, you can use the Device Manager to wipe user data, so the device has the same data as if it were new.
Skin\n
An emulator skin specifies the appearance of a device. The Device Manager provides some predefined skins. You can also define your own, or use skins provided by third parties.\n\n
AVD and app features\n
Be sure your AVD definition includes the device features your app depends on. See Hardware Profile Properties and AVD Properties for lists of features you can define in your AVDs.\n\n

Create an AVD\n
To create a new AVD:\n\n
1.	Open the Device Manager.\n
2.	Click Create Device.\n
The Select Hardware window appears.\n
Notice that only some hardware profiles are indicated to include Play Store. This indicates that these profiles are fully CTS compliant and may use system images that include the Play Store app.\n
3.	Select a hardware profile, and then click Next.\n
If you don\'t see the hardware profile you want, you can create or import a hardware profile.\n
The System Image page appears.
4.	Select the system image for a particular API level, and then click Next.\n
The Recommended tab lists recommended system images. The other tabs include a more complete list. The right pane describes the selected system image. x86 images run the fastest in the emulator.\n
If you see Download next to the system image, you need to click it to download the system image. You must be connected to the internet to download it.\n
The API level of the target device is important, because your app won\'t be able to run on a system image with an API level that\'s less than that required by your app, as specified in the minSdkVersion attribute of the app manifest file. For more information about the relationship between system API level and minSdkVersion, see Versioning Your Apps.\n
If your app declares a element in the manifest file, the app requires a system image in which that external library is present. If you want to run your app on an emulator, create an AVD that includes the required library. To do so, you might need to use an add-on component for the AVD platform; for example, the Google APIs add-on contains the Google Maps library.\n
The Verify Configuration page appears.\n
5.	Change AVD properties as needed, and then click Finish.\n
Click Show Advanced Settings to show more settings, such as the skin.\n
The new AVD appears in the Virtual tab of the Device Manager and the target drop-down menu.\n
To create an AVD starting with a copy:\n\n
1.	From the Virtual tab of the Device Manager, click Menu   and select Duplicate.\n
The Verify Configuration page appears.\n
2.	Click Change or Previous if you need to make changes on the System Image and Select Hardware pages.\n
3.	Make your changes, and then click Finish.\n
The AVD appears in the Virtual tab of the Device Manager.\n\n

Create a hardware profile\n
The Device Manager provides predefined hardware profiles for common devices so you can easily add them to your AVD definitions. If you need to define a different device, you can create a new hardware profile. You can define a new hardware profile from the beginning, or copy a hardware profile as a start. The preloaded hardware profiles aren\'t editable.\n\n
To create a new hardware profile from the beginning:\n
1.	In the Select Hardware page, click New Hardware Profile.\n
2.	In the Configure Hardware Profile page, change the hardware profile properties as needed.\n
3.	Click Finish.\n
Your new hardware profile appears in the Select Hardware page. You can optionally create an AVD that uses the hardware profile by clicking Next. Or, click Cancel to return to the Virtual tab or target device drop-down menu.\n\n
To create a hardware profile starting with a copy:\n
1.	In the Select Hardware page, select a hardware profile and click Clone Device.\n
Or right-click a hardware profile and select Clone.\n
2.	In the Configure Hardware Profile page, change the hardware profile properties as needed.\n
3.	Click Finish.\n
Your new hardware profile appears in the Select Hardware page. You can optionally create an AVD that uses the hardware profile by clicking Next. Or, click Cancel to return to the Virtual tab or target device drop-down menu.\n\n

Edit existing AVDs\n
From the Virtual tab of the Device Manager, you can perform the following operations on an existing AVD\n:
•	To edit an AVD, click Edit this AVD   and make your changes.\n
•	To delete an AVD, click Menu   and select Delete.\n
•	To show the associated AVD .ini and .img files on disk, click Menu   and select Show on Disk.\n
•	To view AVD configuration details that you can include in any bug reports to the Android Studio team, click Menu   and select View Details.\n\n
Edit existing hardware profiles\n
From the Select Hardware page, you can perform the following operations on an existing hardware profile:\n
•	To edit a hardware profile, select it and click Edit Device. Or right-click a hardware profile and select Edit. Next, make your changes.\n
•	To delete a hardware profile, right-click it and select Delete.\n
You can\'t edit or delete the predefined hardware profiles.\n\n
Run and stop an emulator, and clear data\n
From the Virtual tab, you can perform the following operations on an emulator:\n
•	To run an emulator that uses an AVD, click Launch.\n
•	To stop a running emulator, click Menu   and select Stop.\n
•	To clear the data for an emulator, select Wipe Data. Or click Menu   and select Wipe Data.\n\n
Import and export hardware profiles\n
From the Select Hardware page, you can import and export hardware profiles:\n
•	To import a hardware profile, click Import Hardware Profiles and select the XML file containing the definition on your computer.\n
•	To export a hardware profile, right-click it and select Export. Specify the location where you want to store the XML file containing the definition.\n\n
Hardware profile properties\n
You can specify the following properties of hardware profiles in the Configure Hardware Profile page. AVD configuration properties override hardware profile properties, and emulator properties that you set while the emulator is running override them both.\n
The predefined hardware profiles included with the Device Manager aren\'t editable. However, you can copy them and edit the copies.\n\n
Device Name\n
-	Name of the hardware profile. The name can contain uppercase or lowercase letters, numbers from 0 to 9, periods (.), underscores (_), parentheses ( () ), and spaces. The name of the file storing the hardware profile is derived from the hardware profile name.\n\n

Device Type\n
Select one of the following:
•	Phone/Tablet\n
•	Wear OS\n
•	Android TV\n
•	Chrome OS Device\n
•	Android Automotive\n\n

Screen Size\n
-	The physical size of the screen, in inches, measured at the diagonal. If the size is larger than your computer screen, it’s reduced in size at launch.\n\n

Screen Resolution\n
-	Type a width and height in pixels to specify the total number of pixels on the simulated screen.\n\n
Round\n
-	Select this option if the device has a round screen, such as some Wear OS devices.\n\n

Memory: RAM\n\n
-	Type a RAM size for the device and select the units, one of B (byte), KB (kilobyte), MB (megabyte), GB (gigabyte), or TB (terabyte).\n\n

Input: Has Hardware Buttons (Back/Home/Menu)\n
-	Select this option if your device has hardware navigation buttons. Deselect it if these buttons are implemented in software only. If you select this option, the buttons won’t appear on the screen. You can use the emulator side panel to "press" the buttons, in either case.\n\n

Input: Has Hardware Keyboard\n
-	Select this option if your device has a hardware keyboard. Deselect it if it doesn’t. If you select this option, a keyboard won’t appear on the screen. You can use your computer keyboard to send keystrokes to the emulator, in either case.\n\n


Navigation Style\n
Select one of the following:\n
•	None - No hardware controls. Navigation is through the software.\n
•	D-pad - Directional Pad support.\n
•	Trackball\n
•	Wheel\n
These options are for actual hardware controls on the device itself. However, the events sent to the device by an external controller are the same.\n\n

Supported Device States\n
Select one or both options:\n
•	Portrait - Oriented taller than wide.\n
•	Landscape - Oriented wider than tall.\n
If you select both, you can switch between orientations in the emulator. You must select at least one option to continue.\n

Cameras\n
To enable the camera, select one or both options:\n
•	Back-Facing Camera - The lens faces away from the user.\n
•	Front-Facing Camera - The lens faces toward the user.\n
Later, you can use a webcam or a photo provided by the emulator to simulate taking a photo with the camera.\n\n

Sensors: Accelerometer\n
-	Select if the device has hardware that helps the device determine its orientation.\n\n

Sensors: Gyroscope\n
-	Select if the device has hardware that detects rotation or twist. In combination with an accelerometer, it can provide smoother orientation detection and support a six-axis orientation system.\n\n

Sensors: GPS\n
-	Select if the device has hardware that supports the Global Positioning System (GPS) satellite-based navigation system.\n\n

Sensors: Proximity Sensor\n
-	Select if the device has hardware that supports the Global Positioning System (GPS) satellite-based navigation system.\n\n

Default Skin\n
-	Select a skin that controls what the device looks like when displayed in the emulator. Remember that specifying a screen size that's too big for the resolution can mean that the screen is cut off, so you can't see the whole screen. See Create an emulator skin for more information.\n\n
        AVD properties\n
You can specify the following properties for AVD configurations in the Verify Configuration page. The AVD configuration specifies the interaction between the development computer and the emulator, as well as properties you want to override in the hardware profile. \n
AVD configuration properties override hardware profile properties. Emulator properties that you set while the emulator is running override them both. \n\n

AVD Name\n
-	Name of the AVD. The name can contain uppercase or lowercase letters, numbers from 0 to 9, periods (.), underscores (_), parentheses ( () ), dashes (-), and spaces. The name of the file storing the AVD configuration is derived from the AVD name. \n\n

AVD ID (Advanced) \n
-	The AVD filename is derived from the ID, and you can use the ID to refer to the AVD from the command line. \n\n
Hardware Profile\n
-	Click Change to select a different hardware profile in the Select Hardware page. \n\n

System Image\n
-	Click Change to select a different system image in the System Image page. An active internet connection is required to download a new image. \n\n

Startup Orientation\n
Select one option for the initial emulator orientation: \n
•	Portrait - Oriented taller than wide. \n
•	Landscape - Oriented wider than tall. \n
An option is enabled only if it’s selected in the hardware profile. When running the AVD in the emulator, you can change the orientation if both portrait and landscape are supported in the hardware profile. \n\n

Camera (Advanced) \n
To enable a camera, select one or both options: \n
•	Front - The lens faces away from the user. \n
•	Back - The lens faces toward the user. \n
The Emulated setting produces a software-generated image, while the Webcam setting uses your development computer webcam to take a picture. \n
This option is available only if it's selected in the hardware profile; it's not available for Wear OS and Android TV. \n\n

Network: Speed (Advanced) \n
Select a network protocol to determine the speed of data transfer: \n
•	GSM - Global System for Mobile Communications\n
•	HSCSD - High-Speed Circuit-Switched Data\n
•	GPRS - Generic Packet Radio Service\n
•	EDGE - Enhanced Data rates for GSM Evolution\n
•	UMTS - Universal Mobile Telecommunications System\n
•	HSDPA - High-Speed Downlink Packet Access\n
•	LTE - Long-Term Evolution\n
•	Full (default) - Transfer data as quickly as your computer allows. \n\n

Network: Latency (Advanced) \n
-	Select a network protocol to set how much time (delay) it takes for the protocol to transfer a data packet from one point to another point. \n\n

Emulated Performance: Graphics\n
Select how graphics are rendered in the emulator: \n
•	Hardware - Use your computer graphics card for faster rendering. \n
•	Software - Emulate the graphics in software, which is useful if you're having a problem with rendering in your graphics card. \n
•	Automatic - Let the emulator decide the best option based on your graphics card. \n\n

Emulated Performance: Boot option (Advanced) \n
•	Cold boot - Start the device each time by powering up from the device-off state. \n
•	Quick boot - Start the device by loading the device state from a saved snapshot. For details, see Run the emulator with Quick Boot. \n\n

Emulated Performance: Multi-Core CPU (Advanced) \n
-	Select the number of processor cores on your computer that you’d like to use for the emulator. Using more processor cores speeds up the emulator. \n\n

Memory and Storage: RAM\n
-	The amount of RAM on the device. This value is set by the hardware manufacturer, but you can override it, if needed, such as for faster emulator operation. Increasing the size uses more resources on your computer. Type a RAM size and select the units, one of B (byte), KB (kilobyte), MB (megabyte), GB (gigabyte), or TB (terabyte). \n\n

Memory and Storage: VM Heap\n
-  The VM heap size. This value is set by the hardware manufacturer, but you can override it, if needed. Type a heap size and select the units, one of B (byte), KB (kilobyte), MB (megabyte), GB (gigabyte), or TB (terabyte). For more information on Android VMs, see Memory Management for Different Virtual Machines. \n\n

Memory and Storage: Internal Storage\n
-	The amount of nonremovable memory space available on the device. This value is set by the hardware manufacturer, but you can override it, if needed. Type a size and select the units, one of B (byte), KB (kilobyte), MB (megabyte), GB (gigabyte), or TB (terabyte). \n\n

Memory and Storage: SD Card\n
-	The amount of removable memory space available to store data on the device. To use a virtual SD card managed by Android Studio, select Studio-managed, type a size, and select the units, one of B (byte), KB (kilobyte), MB (megabyte), GB (gigabyte), or TB (terabyte). A minimum of 100 MB is recommended to use the camera. To manage the space in a file, select External file and click ... to specify the file and location. For more information, see mksdcard and AVD data directory. \n\n

Device Frame: Enable Device Frame\n
-	Select to enable a frame around the emulator window that mimics the look of a real device. \n\n

Custom Skin Definition (Advanced) \n
-	Select a skin that controls what the device looks like when displayed in the emulator. Remember that specifying a screen size that's too big for the skin can mean that the screen is cut off, so you can't see the whole screen. See Create an emulator skin for more information. \n\n

Keyboard: Enable Keyboard Input (Advanced)
-	Select this option if you want to use your hardware keyboard to interact with the emulator. It's disabled for Wear OS and Android TV.\n
    Source:
        Site: https://developer.android.com/studio/run/managing-avds#:~:text=An%20Android%20Virtual%20Device%20(AVD,simulate%20in%20the%20Android%20Emulator.
    </string>
    <string name="run">
        Android Studio sets up new projects to deploy to the Android Emulator or a connected device with just a few clicks. Once your app is installed, you can use Apply Changes to deploy certain code and resource changes without building a new APK.\n
To build and run your app, follow these steps:\n
1.	In the toolbar, select your app from the run configurations drop-down menu. \n
2.	From the target device drop-down menu, select the device that you want to run your app on. \n
3.	If you don\'t have any devices configured, then you need to either connect a device via USB or create an AVD to use the Android Emulator. \n
4.	Click Run . \n
Android Studio will warn you if you attempt to launch your project to a device that has an error or a warning associated with it. Iconography and stylistic changes differentiate between errors (device selections that result in a broken configuration) and warnings (device selections that may result in unexpected behavior but are still runnable).

        Source:
        Site: https://developer.android.com/studio/run
    </string>
    <string name="s_intro">
        SQL stands for Structured Query Language, SQL lets you access and manipulate databases, SQL became a standard of the American National Standards Institute (ANSI) in 1986, and of the International Organization for Standardization (ISO) in 1987.
    </string>
    <string name="between">
        The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.\n

The BETWEEN operator is inclusive: begin and end values are included. \n\n
BETWEEN Syntax\n
CODE;\n
SELECT * FROM Products\n
WHERE Price BETWEEN 10 AND 20;
    </string>
    <string name="aon">
        The WHERE clause can be combined with AND, OR, and NOT operators. The AND and OR operators are used to filter records based on more than one condition: \n
The AND operator displays a record if all the conditions separated by AND are TRUE. The OR operator displays a record if any of the conditions separated by OR is TRUE. The NOT operator displays a record if the condition(s) is NOT TRUE. \n
- AND Syntax \n
SELECT * FROM Customers \n
WHERE Country='Germany' AND City='Berlin'; \n
- OR Example \n
SELECT * FROM Customers \n
WHERE City='Berlin' OR City='München'; \n
- NOT Example \n
SELECT * FROM Customers \n
WHERE NOT Country='Germany'; \n
    </string>
    <string name="order">
        The ORDER BY keyword is used to sort the result-set in ascending or descending order. The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword. \n
ORDER BY Syntax \n
SELECT * FROM Customers \n
ORDER BY Country; \n
    </string>
    <string name="update">
        The UPDATE statement is used to modify the existing records in a table. \n\n
UPDATE Syntax \n
UPDATE Customers\n 
SET ContactName='Alfred Schmidt', City='Frankfurt'\n 
WHERE CustomerID=1;

    </string>
    <string name="null_value">
        A field with a NULL value is a field with no value. If a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. Then, the field will be saved with a NULL value. \n\n
SELECT CustomerName, ContactName, Address \n
FROM Customers \n
WHERE Address IS NULL;

    </string>
    <string name="where">
        The WHERE clause is used to filter records. It is used to extract only those records that fulfill a specified condition. \n\n
WHERE Syntax\n
 SELECT * FROM Customers\n 
WHERE Country='Mexico';
    </string>
    <string name="case_s">
        The CASE statement goes through conditions and returns a value when the first condition is met (like an if-then-else statement). So, once a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the ELSE clause. If there is no ELSE part and no conditions are true, it returns NULL. \n\n
CASE Syntax \n
- SELECT OrderID, Quantity, CASE WHEN Quantity > 30 THEN 'The quantity is greater than 30'\n
WHEN Quantity = 30 THEN 'The quantity is 30' \n
ELSE 'The quantity is under 30' \n
END AS QuantityText \n
FROM OrderDetails; \n
 - SELECT CustomerName, City, Country FROM Customers \n
ORDER BY (CASE WHEN City IS NULL THEN Country ELSE City END);
    </string>
    <string name="j_intro">
        Java is a popular programming language, created in 1995. It is owned by Oracle, and more than 3 billion devices run Java. \n
It is used for: Mobile applications (specially Android apps) \n
 Desktop applications Web applications Web servers and application servers \n
 Games Database connection \n
 And much, much more! \n
    </string>
    <string name="variables">
        Variables are containers for storing data values. In Java, there are different types of variables, for example: \n
String - stores text, such as "Hello". String values are surrounded by double quotes \n
int - stores integers (whole numbers), without decimals, such as 123 or -123 \n
float - stores floating point numbers, with decimals, such as 19.99 or -19.99 \n
char - stores single characters, such as a or B. Char values are surrounded by single quotes \n
boolean - stores values with two states: true or false \n

Syntax
type variableName = value; \n
Where type is one of Java\'s types (such as int or String), and variableName is the name of the variable (such as x or name). The equal sign is used to assign values to the variable. \n
Create a variable called name of type String and assign it the value "John": \n
String name = "John"; \n
System.out.println(name); \n
Create a variable called myNum of type int and assign it the value 15: \n
int myNum = 15; \n
System.out.println(myNum); \n
You can also declare a variable without assigning the value, and assign the value later: \n
Example \n
int myNum; myNum = 15; \n
System.out.println(myNum); \n
Note that if you assign a new value to an existing variable, it will overwrite the previous value: \n
Example \n
Change the value of myNum from 15 to 20: \n
int myNum = 15; myNum = 20; // myNum is now 20 \n
System.out.println(myNum); \n
Final Variables \n
However, you can add the final keyword if you don\'t want others (or yourself) to overwrite existing values (this will declare the variable as "final" or "constant", which means unchangeable and read-only): \n
Example \n
final int myNum = 15; \n
myNum = 20; // will generate an error: cannot assign a value to a final variable \n

Other Types A demonstration of how to declare variables of other types: \n
Example \n
 int myNum = 5; float myFloatNum = 5.99f; \n
char myLetter = \'D\'; \n
boolean myBool = true; String myText = "Hello"; \n \n
Display Variables \n
The println() method is often used to display variables. To combine both text and a variable, use the + character: \n
Example \n
String name = "John"; \n
System.out.println("Hello " + name); \n
You can also use the + character to add a variable to another variable: \n
Example \n
String firstName = "John "; \n
String lastName = "Doe"; \n
String fullName = firstName + lastName; \n
System.out.println(fullName); \n
For numeric values, the + character works as a mathematical operator (notice that we use int (integer) \ variables here): \n
Example \n
int x = 5; \n
int y = 6; \n
System.out.println(x + y); // Print the value of x + y \n
From the example above, you can expect: \n
 x stores the value 5 \n
y stores the value 6 \n\n
Then we use the println() method to display the value of x + y, which is 11 \n
Declare Many Variables To declare more than one variable of the same type, use a comma-separated list: \n
Example \n
int x = 5, y = 6, z = 50; \n
System.out.println(x + y + z); \n \n
Java Identifiers \n
All Java variables must be identified with unique names. These unique names are called identifiers. Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume). Note: It is recommended to use descriptive names in order to create understandable and maintainable code: \n Example \n
// Good int minutesPerHour = 60; \n
// OK, but not so easy to understand what m actually is int m = 60; \n
The general rules for naming variables are: \n
Names can contain letters, digits, underscores, and dollar signs \n
Names must begin with a letter Names should start with a lowercase letter and it cannot contain whitespace \n
Names can also begin with $ and _ (but we will not use it in this tutorial) Names are case sensitive ("myVar" and "myvar" are different variables) Reserved words (like Java keywords, such as int or boolean) cannot be used as names \n

    </string>
    <string name="jdt">
        As explained in the previous chapter, a variable in Java must be a specified data type: \n
Example int myNum = 5; // Integer (whole number) \n
float myFloatNum = 5.99f; //Floating point number \n
char myLetter = \'D\'; // Character \n
boolean myBool = true; // Boolean \n
String myText = "Hello"; // String \n
Data types are divided into two groups: \n 
Primitive data types - includes byte, short, int, long, float, double, boolean and char \n 
Non-primitive data types - such as String, Arrays and Classes (you will learn more about these in a later chapter) \n \n
Primitive Data Types \n
A primitive data type specifies the size and type of variable values, and it has no additional methods. Numbers Primitive number types are divided into two groups: \n
Integer types stores whole numbers, positive or negative (such as 123 or -456), without decimals. \n
Valid types are byte, short, int and long. Which type you should use, depends on the numeric value. Floating point types represents numbers with a fractional part, containing one or more decimals. There are two types: float and doubleah7⁶ them all as you continue to read.

There are eight primitive data types in Java:\n\n

Data Type	Size	Description\n
byte	1 byte	Stores whole numbers from -128 to 127\n
short	2 bytes	Stores whole numbers from -32,768 to 32,767\n
int	4 bytes	Stores whole numbers from -2,147,483,648 to 2,147,483,647\n
long	8 bytes	Stores whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807\n
float	4 bytes	Stores fractional numbers. Sufficient for storing 6 to 7 decimal digits\n
double	8 bytes	Stores fractional numbers. Sufficient for storing 15 decimal digits\n
boolean	1 bit	Stores true or false values\n
char	2 bytes	Stores a single character/letter or ASCII values\n\n

Numbers\n
Primitive number types are divided into two groups:\n\n

Integer types stores whole numbers, positive or negative (such as 123 or -456), without decimals. Valid types are byte, short, int and long. Which type you should use, depends on the numeric value.\n\n

Floating point types represents numbers with a fractional part, containing one or more decimals. There are two types: float and double.\n\n

Integer Types\n
Byte\n
The byte data type can store whole numbers from -128 to 127. This can be used instead of int or other integer types to save memory when you are certain that the value will be within -128 and 127:\n\n

Example\n
byte myNum = 100;\n
System.out.println(myNum);\n\n

Short\n
The short data type can store whole numbers from -32768 to 32767:\n\n

Example\n
short myNum = 5000;\n
System.out.println(myNum);\n\n

Int\n
The int data type can store whole numbers from -2147483648 to 2147483647. In general, and in our tutorial, the int data type is the preferred data type when we create variables with a numeric value.\n\n

Example\n
int myNum = 100000;\n
System.out.println(myNum);\n\n

Long\n
The long data type can store whole numbers from -9223372036854775808 to 9223372036854775807. This is used when int is not large enough to store the value. Note that you should end the value with an "L":\n\n

Example\n
long myNum = 15000000000L;\n
System.out.println(myNum);\n\n

Floating Point Types\n
You should use a floating point type whenever you need a number with a decimal, such as 9.99 or 3.14515.\n\n

Float\n
The float data type can store fractional numbers from 3.4e−038 to 3.4e+038. Note that you should end the value with an "f":\n\n

Example\n
float myNum = 5.75f;\n
System.out.println(myNum);\n\n

Double\n
The double data type can store fractional numbers from 1.7e−308 to 1.7e+308. Note that you should end the value with a "d":\n\n

Example\n
double myNum = 19.99d;\n
System.out.println(myNum);\n\n

Use float or double?\n\n

The precision of a floating point value indicates how many digits the value can have after the decimal point. The precision of float is only six or seven decimal digits, while double variables have a precision of about 15 digits. Therefore it is safer to use double for most calculations.\n\n

Scientific Numbers\n
A floating point number can also be a scientific number with an "e" to indicate the power of 10:\n\n

Example\n
float f1 = 35e3f;\n
double d1 = 12E4d;\n
System.out.println(f1);\n
System.out.println(d1);\n\n

Booleans\n
A boolean data type is declared with the boolean keyword and can only take the values true or false:\n\n

Example\n
boolean isJavaFun = true;\n
boolean isFishTasty = false;\n
System.out.println(isJavaFun);     // Outputs true\n
System.out.println(isFishTasty);   // Outputs false\n\n

Characters\n
The char data type is used to store a single character. The character must be surrounded by single quotes, like 'A' or 'c':\n\n

Example\n
char myGrade = /'B/';\n
System.out.println(myGrade);\n\n

Alternatively, you can use ASCII values to display certain characters:\n\n

Example\n
char myVar1 = 65, myVar2 = 66, myVar3 = 67;\n
System.out.println(myVar1);\n
System.out.println(myVar2);\n
System.out.println(myVar3);\n\n

Strings\n
The String data type is used to store a sequence of characters (text). String values must be surrounded by double quotes:\n\n

Example\n
String greeting = "Hello World";\n
System.out.println(greeting);\n
    </string>
    <string name="operators">
Operators are used to perform operations on variables and values.\n

In the example below, we use the + operator to add together two values:\n\n

Example\n
int x = 100 + 50;\n\n

Although the + operator is often used to add together two values, like in the example above, it can also be used to add together a variable and a value, or a variable and another variable:\n

Example\n
int sum1 = 100 + 50;        // 150 (100 + 50)\n
int sum2 = sum1 + 250;      // 400 (150 + 250)\n
int sum3 = sum2 + sum2;     // 800 (400 + 400)\n

Java divides the operators into the following groups:\n\n

Arithmetic operators\n
Assignment operators\n
Comparison operators\n
Logical operators\n
Bitwise operators\n
Arithmetic Operators\n
Arithmetic operators are used to perform common mathematical operations.\n\n

Operator	Name	Description	Example	Try it\n
+	Addition	Adds together two values	x + y\n
-	Subtraction	Subtracts one value from another	x - y\n
*	Multiplication	Multiplies two values	x * y\n
/	Division	Divides one value by another	x / y\n
%	Modulus	Returns the division remainder	x % y\n
++	Increment	Increases the value of a variable by 1	++x\n
--	Decrement	Decreases the value of a variable by 1	--x\n\n

Java Assignment Operators\n
Assignment operators are used to assign values to variables.\n\n

In the example below, we use the assignment operator 😊) to assign the value 10 to a variable called x:\n\n

Example\n
int x = 10;\n\n

The addition assignment operator (+=) adds a value to a variable:\n\n

Example\n
int x = 10;\n
x += 5;\n\n

A list of all assignment operators:\n\n

Operator	Example	Same As	Try it\n
=	x = 5	x = 5\n
+=	x += 3	x = x + 3\n
-=	x -= 3	x = x - 3\n
*=	x *= 3	x = x * 3\n
/=	x /= 3	x = x / 3\n
%=	x %= 3	x = x % 3\n
&amp;=	x &amp;= 3	x = x &amp; 3\n
|=	x |= 3	x = x | 3\n
^=	x ^= 3	x = x ^ 3\n
>=	x >>= 3	x = x >> 3\n\n

less than equal to	x  less than equal to 3	x = x is less than to  3\n\n

Java Comparison Operators\n
Comparison operators are used to compare two values:\n\n

Operator	Name	Example	Try it\n
==	Equal to	x == y\n
!=	Not equal	x != y\n
	Greater than	x > y\n\n

	Less than	x less than y\n
	Greater than or equal to	x greater than equal to y\n

	Less than or equal to	x less than or equal to y\n\n


Java Logical Operators\n
Logical operators are used to determine the logic between variables or values:\n\n

Operator	Name	Description	Example	Try it\n
&amp; 	Logical and	Returns true if both statements are true	x less than 5 &amp;&amp;  x less than 10\n
|| 	Logical or	Returns true if one of the statements is true	x less than 5 || x less than 4\n
!	Logical not	Reverse the result, returns false if the result is true	!(x less than 5 &amp;&amp; x less than 10)\n
    </string>
    <string name="string">
        Strings are used for storing text.\n\n

A String variable contains a collection of characters surrounded by double quotes:\n\n

Example\n
Create a variable of type String and assign it a value:\n\n

String greeting = "Hello";\n\n

String Length\n
A String in Java is actually an object, which contain methods that can perform certain operations on strings. For example, the length of a string can be found with the length() method:\n\n

Example\n
String txt = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";\n
System.out.println("The length of the txt string is: " + txt.length());\n\n

More String Methods\n
There are many string methods available, for example toUpperCase() and toLowerCase():\n\n

Example\n
String txt = "Hello World";\n
System.out.println(txt.toUpperCase());   // Outputs "HELLO WORLD"\n
System.out.println(txt.toLowerCase());   // Outputs "hello world"\n\n

Finding a Character in a String\n
The indexOf() method returns the index (the position) of the first occurrence of a specified text in a string (including whitespace):\n\n

Example\n
String txt = "Please locate where 'locate' occurs!";\n
System.out.println(txt.indexOf("locate")); // Outputs 7\n\n

String Concatenation\n
The + operator can be used between strings to combine them. This is called concatenation:\n\n

Example\n
String firstName = "John";\n
String lastName = "Doe";\n
System.out.println(firstName + " " + lastName);\n\n

Note that we have added an empty text (" ") to create a space between firstName and lastName on print.\n\n

You can also use the concat() method to concatenate two strings:\n\n

Example\n
String firstName = "John ";\n
String lastName = "Doe";\n
System.out.println(firstName.concat(lastName));\n\n

Special Characters\n
Because strings must be written within quotes, Java will misunderstand this string, and generate an error:\n\n

String txt = "We are the so-called "Vikings" from the north.";\n
The solution to avoid this problem, is to use the backslash escape character.\n\n

The backslash (\) escape character turns special characters into string characters:\n\n

Escape character	Result	Description\n
\'	'	Single quote\n
\"	"	Double quote\n
\\	\	Backslash\n\n

e sequence \"  inserts a double quote in a string:\n\n

Example\n
String txt = "We are the so-called \"Vikings\" from the north.";\n\n

The sequence \'  inserts a single quote in a string:\n\n

Example\n
String txt = "It\'s alright.";\n\n

The sequence \\  inserts a single backslash in a string:\n\n

Example\n
String txt = "The character \\ is called backslash.";\n\n

Six other escape sequences are valid in Java:\n\n

Code	Result	Try it\n
\n	New Line\n
\r	Carriage Return\n
\t	Tab\n
\b	Backspace\n
\f	Form Feed\n

Adding Numbers and Strings\n\n
WARNING!\n\n

Java uses the + operator for both addition and concatenation.\n\n

Numbers are added. Strings are concatenated.\n\n

If you add two numbers, the result will be a number:\n\n

Example\n
int x = 10;\n
int y = 20;\n
int z = x + y;      // z will be 30 (an integer/number)\n\n

If you add two strings, the result will be a string concatenation:\n\n

Example\n
String x = "10";\n
String y = "20";\n
String z = x + y;   // z will be 1020 (a String)\n\n

If you add a number and a string, the result will be a string concatenation:\n\n

Example\n
String x = "10";\n
int y = 20;\n
String z = x + y;   // z will be 1020 (a String)\n
    </string>
    <string name="h_intro">
        HTML stands for Hyper Text Markup Language HTML is the standard markup language for creating Web pages HTML describes the structure of a Web page HTML consists of a series of elements HTML elements tell the browser how to display the content\n\n
        HTML elements label pieces of content such as "this is a heading", "this is a paragraph", "this is a link", etc. A Simple HTML Document\n\n

 Example\n
!DOCTYPE html \n
html \n
head \n
title Page Title title \n
 head\n
 body\n
 h1 My First Heading h1 \n
My first paragraph.\n
 body \n
html\n

Example Explained\n
The DOCTYPE html declaration defines that this document is an HTML5 document \n
        The html element is the root element of an HTML page \n
        The head element contains meta information about the HTML page \n
        The title element specifies a title for the HTML page (which is shown in the browser\'s title bar or in the page's tab)\n
        The body element defines the document's body, and is a container for all the visible contents, such as headings, paragraphs, images, hyperlinks, tables, lists, etc. \n
        The h1 element defines a large heading \n
        The p element defines a paragraph \n\n

    </string>
    <string name="h_element">
        What is an HTML Element?
 An HTML element is defined by a start tag, some content, and an end tag: HTML Documents All HTML documents must start with a document type declaration: !DOCTYPE html. The HTML document itself begins with <html> and ends with </html>. The visible part of the HTML document is between <body> and </body>. \n\n
Example\n
DOCTYPE html\n
html\n
body \n
h1 My First Heading h1\n
p My first paragraph. p \n
body \n
html \n
        The !DOCTYPE declaration represents the document type, and helps browsers to display web pages correctly. It must only appear once, at the top of the page (before any HTML tags). The !DOCTYPE declaration is not case sensitive. The !DOCTYPE declaration for HTML5 is: \n\n
DOCTYPE html

    </string>
    <string name="heading">
        HTML headings are defined with the <h1></h1> to <h6></h6> tags. <h1></h1> defines the most important heading. <h6></h6> defines the least important heading: \n
Example \n
h1 This is heading 1 h1 \n
h2 This is heading 2 h2 \n
h3 This is heading 3 h3 \n

    </string>
    <string name="paragraphs">
        HTML paragraphs are defined with the  p tag: \n
Example\n
p This is a paragraph.p\n
p This is another paragraph. p

    </string>
    <string name="links">
        HTML links are defined with the \n
        a tag: a \n\n
        Example a href="https://www.w3schools.com">This is a link a \n
        The link\'s destination is specified in the href attribute. Attributes are used to provide additional information about HTML elements. You will learn more about attributes in a later chapter. HTML Images HTML images are defined with the <img></img> tag. The source file (src), alternative text (alt), width, and height are provided as attributes: \n

Example\n

img src="w3schools.jpg" alt="W3Schools.com" width="104" height="142"\n

    </string>


</resources>